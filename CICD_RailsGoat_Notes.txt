=====================
Jenkins-izing notes
=====================
What should the experience be?
- Clone repo, have Vagrant installed
- vagrant up:
  - Installs Docker, Compose, and Jenkins
  - Copy railsgoat-lab to /home/vagrant
  - git config for vagrant user
  - Initialize git repos inside of ~/railsgoat-lab/arachni_jenkins and ~/railsgoat-lab/brakeman_jenkins (for Jenkins jobs)
  - git add . && git commit inside arachni_jenkins and brakeman_jenkins
- user sets up Jenkins with community-suggested plugins (multi-pipeline)
- user sets up Jenkins jobs (brakeman first, arachni second)
- user first understands the automation, then triggers it

What points to make?
- Difference in running time between arachni and brakeman
- false positive filtering

What user interactivity?
- First understand the automation, then trigger it
- Trigger standup of railsgoat
- Trigger brakeman
- Trigger arachni
- Gather/analyze tool output



=====================
RailsGoat CI-CD Notes
=====================

====Manual Installation====
- https://github.com/OWASP/railsgoat
- Make a Vagrant box with git, tmux, curl installed
- Install RVM + Ruby as non-root user, with: curl -L https://get.rvm.io | bash -s stable --autolibs=3 --ruby=2.4.3
	- This command installs some dependencies, which worked as non-root
- Cloned RailsGoat repo with: git clone https://github.com/OWASP/railsgoat.git
- Changing into the cloned dir automatically created a new gemset (compartmentalized ruby + gem setup) at /home/vagrant/.rvm/gems/ruby-2.4.3@railsgoat
- Activated RVM with: source ~/.rvm/scripts/rvm
- Needed to install bundler with: gem install bundler (this installed it to the gemset)
- In the cloned dir, install dependent gems with: bundle install. This failed initially, complaining about lack of mysql client (mysql client is missing. You may need to 'apt-get install libmysqlclient-dev' or 'yum install mysql-devel', and try again.).
- Installed the suggested mysql dev package with: sudo apt-get install libmysqlclient-dev
- Re-ran the RVM source command, cd'ed back into the railsgoat cloned dir, re-ran bundle install, this worked
- Added libmysqlclient-dev to the Vagrant provisioner
- Initialized DB with: rails db:setup
- The DB defaulted to using an SQLite DB, created 2 DBs (<railsgoatdir>/db/test.sqlite3 and <railsgoatdir>/db/development.sqlite3)
- Started server running with: rails server
- WEBrick Server listening on VM's TCP/3000, modified Vagrantfile to forward this port to the host

====Automated RailsGoat Installation====
- Automated (via Vagrantfile) dependency installation, railsgoat setup, such that "rails server" works after Vagrant provisioning

====Manual Jenkins + Arachni Setup====
- Installed jenkins (https://jenkins.io/doc/book/installing/#debian-ubuntu)
- Install the jenkins key as root (wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -)
- Added a line for Jenkins LTS to source.list with: deb http://pkg.jenkins.io/debian-stable binary/
- Installed jenkins with: sudo apt-get install jenkins (this installed dependencies, including a JDK and JRE)
- Added a line to the Vagrantfile to autoinstall Jenkins + key under the root provisioner section
- Added a line to Vagrantfile to forward 8080 (default Jenkins port) to the host

====Arachni Experimentation====
- Got Arachni installed, download/untar/run
- Experimenting with web UI, created a new scan profile for railsgoat (login with one of the railsgoat users, session detection, logout exclusion)
- Discovered that arachni doesn't support scanning localhost -- adding an /etc/hosts entry to avoid this problem (map railsgoat to 127.0.0.1)
- Got arachni to scan RailsGoat, authenticated, using jim@metacorp.com/alohaowasp, saved this profile, adding it to the git repo for later invocation via CLI
